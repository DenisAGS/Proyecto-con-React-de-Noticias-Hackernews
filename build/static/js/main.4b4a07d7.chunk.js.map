{"version":3,"sources":["components/Link.js","components/LinkList.js","components/CreateLink.js","constants.js","components/Header.js","components/Login.js","components/App.js","serviceWorker.js","index.js"],"names":["Link","props","link","description","url","FEED_QUERY","gql","LinkList","data","useQuery","links","map","id","CREATE_LINK_MUTATION","CreateLink","history","useHistory","useState","formState","setFormState","useMutation","variables","onCompleted","push","createLink","onSubmit","e","preventDefault","className","value","onChange","target","type","placeholder","AUTH_TOKEN","Header","authToken","localStorage","getItem","to","onClick","removeItem","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","email","password","name","username","tokenAuth","console","log","setItem","token","signup","App","exact","path","component","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b4a07d7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Link = (props) => {\r\n  const { link } = props;\r\n  return (\r\n    <div>\r\n      <div>\r\n        {link.description} -- ({link.url})\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Link;","import React from 'react';\r\nimport Link from './Link';\r\n\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst FEED_QUERY = gql`\r\n  {\r\n    links{\r\n        id\r\n        url\r\n        description\r\n    }\r\n  }\r\n`;\r\n\r\nconst LinkList = () => {\r\n    const { data } = useQuery(FEED_QUERY);\r\n  \r\n    return (\r\n      <div>\r\n        {data && (\r\n          <>\r\n            {data.links.map((link) => (\r\n              <Link key={link.id} link={link} />\r\n            ))}\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default LinkList;","import React, { useState } from 'react';\r\nimport { useMutation, gql } from '@apollo/client';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst CREATE_LINK_MUTATION = gql`\r\n  mutation CreateLink(\r\n    $description: String!\r\n    $url: String!\r\n  ) {\r\n    createLink(description: $description, url: $url) {\r\n      id\r\n      url\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateLink = () => {\r\n  const history = useHistory();\r\n\r\n  const [formState, setFormState] = useState({\r\n    description: '',\r\n    url: ''\r\n  });\r\n\r\nconst [createLink] = useMutation(CREATE_LINK_MUTATION, {\r\n    variables: {\r\n      description: formState.description,\r\n      url: formState.url\r\n    },\r\n    onCompleted: () => history.push('/')\r\n  });\r\n  \r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          createLink();\r\n        }}\r\n      >\r\n        <div className=\"flex flex-column mt3\">\r\n          <input\r\n            className=\"mb2\"\r\n            value={formState.description}\r\n            onChange={(e) =>\r\n              setFormState({\r\n                ...formState,\r\n                description: e.target.value\r\n              })\r\n            }\r\n            type=\"text\"\r\n            placeholder=\"A description for the link\"\r\n          />\r\n          <input\r\n            className=\"mb2\"\r\n            value={formState.url}\r\n            onChange={(e) =>\r\n              setFormState({\r\n                ...formState,\r\n                url: e.target.value\r\n              })\r\n            }\r\n            type=\"text\"\r\n            placeholder=\"The URL for the link\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateLink;","export const AUTH_TOKEN = 'auth-token';","import React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { AUTH_TOKEN } from '../constants';\r\n\r\nconst Header = () => {\r\n  const history = useHistory();\r\n  const authToken = localStorage.getItem(AUTH_TOKEN);\r\n  return (\r\n    <div className=\"flex pa1 justify-between nowrap orange\">\r\n      <div className=\"flex flex-fixed black\">\r\n        <div className=\"fw7 mr1\">Hacker News</div>\r\n        <Link to=\"/\" className=\"ml1 no-underline black\">\r\n          new\r\n        </Link>\r\n        <div className=\"ml1\">|</div>\r\n        <Link to=\"/top\" className=\"ml1 no-underline black\">\r\n          top\r\n        </Link>\r\n        <div className=\"ml1\">|</div>\r\n        <Link\r\n          to=\"/search\"\r\n          className=\"ml1 no-underline black\"\r\n        >\r\n          search\r\n        </Link>\r\n        {authToken && (\r\n          <div className=\"flex\">\r\n            <div className=\"ml1\">|</div>\r\n            <Link\r\n              to=\"/create\"\r\n              className=\"ml1 no-underline black\"\r\n            >\r\n              submit\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"flex flex-fixed\">\r\n        {authToken ? (\r\n          <div\r\n            className=\"ml1 pointer black\"\r\n            onClick={() => {\r\n              localStorage.removeItem(AUTH_TOKEN);\r\n              history.push(`/`);\r\n            }}\r\n          >\r\n            logout\r\n          </div>\r\n        ) : (\r\n          <Link\r\n            to=\"/login\"\r\n            className=\"ml1 no-underline black\"\r\n          >\r\n            login\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useMutation, gql } from '@apollo/client';\r\nimport { AUTH_TOKEN } from '../constants';\r\n\r\nconst SIGNUP_MUTATION = gql`\r\n  mutation SignupMutation(\r\n    $email: String!\r\n    $password: String!\r\n    $name: String!\r\n  ) {\r\n    signup(\r\n      email: $email\r\n      password: $password\r\n      name: $name\r\n    ) {\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation TokenAuth(\r\n    $username: String!\r\n    $password: String!\r\n  ) {\r\n    tokenAuth(username: $username, password: $password) {\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const [formState, setFormState] = useState({\r\n    login: true,\r\n    email: '',\r\n    password: '',\r\n    name: ''\r\n  });\r\n\r\n  const [login] = useMutation(LOGIN_MUTATION, {\r\n    variables: {\r\n      username: formState.email,\r\n      password: formState.password\r\n    },\r\n    onCompleted: ({ tokenAuth }) => {\r\n      console.log(tokenAuth);\r\n      localStorage.setItem(AUTH_TOKEN, tokenAuth.token);\r\n      history.push('/');\r\n    }\r\n  });\r\n  \r\n  const [signup] = useMutation(SIGNUP_MUTATION, {\r\n    variables: {\r\n      name: formState.name,\r\n      email: formState.email,\r\n      password: formState.password\r\n    },\r\n    onCompleted: ({ signup }) => {\r\n      localStorage.setItem(AUTH_TOKEN, signup.token);\r\n      history.push('/');\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"mv3\">\r\n        {formState.login ? 'Login' : 'Sign Up'}\r\n      </h4>\r\n      <div className=\"flex flex-column\">\r\n        {!formState.login && (\r\n          <input\r\n            value={formState.name}\r\n            onChange={(e) =>\r\n              setFormState({\r\n                ...formState,\r\n                name: e.target.value\r\n              })\r\n            }\r\n            type=\"text\"\r\n            placeholder=\"Your name\"\r\n          />\r\n        )}\r\n        <input\r\n          value={formState.email}\r\n          onChange={(e) =>\r\n            setFormState({\r\n              ...formState,\r\n              email: e.target.value\r\n            })\r\n          }\r\n          type=\"text\"\r\n          placeholder=\"Your email address\"\r\n        />\r\n        <input\r\n          value={formState.password}\r\n          onChange={(e) =>\r\n            setFormState({\r\n              ...formState,\r\n              password: e.target.value\r\n            })\r\n          }\r\n          type=\"password\"\r\n          placeholder=\"Choose a safe password\"\r\n        />\r\n      </div>\r\n      <div className=\"flex mt3\">\r\n      <button\r\n        className=\"pointer mr2 button\"\r\n        onClick={formState.login ? login : signup}\r\n      >\r\n        {formState.login ? 'login' : 'create account'}\r\n      </button>\r\n      <button\r\n        className=\"pointer button\"\r\n        onClick={(e) =>\r\n            setFormState({\r\n              ...formState,\r\n              login: !formState.login\r\n            })\r\n        }\r\n      >\r\n          {formState.login\r\n            ? 'need to create an account?'\r\n            : 'already have an account?'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;","import React, { Component } from 'react';\nimport LinkList from './LinkList';\nimport CreateLink from './CreateLink';\nimport Header from './Header';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './Login';\n\nconst App = () => {\n  return (\n    <div className=\"center w85\">\n      <Header />\n      <div className=\"ph3 pv1 background-gray\">\n        <Switch>\n          <Route exact path=\"/\" component={LinkList} />\n          <Route\n            exact\n            path=\"/create\"\n            component={CreateLink}\n          />\n          <Route exact path=\"/login\" component={Login} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n// 1\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\n// 2\nconst httpLink = createHttpLink({\n  uri: 'http://35.232.232.192:8082/graphql/'\n});\n\n// 3\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\n// 4\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();"],"sourceRoot":""}